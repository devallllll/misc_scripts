<# 
  HP CMSL + HPIA Update Script — v2025-08-22.3 (PS 5.1 compatible)
  - Silent NuGet provider bootstrap (no prompts)
  - Trusts PSGallery, installs/updates HPCMSL
  - BIOS updates via CMSL (BitLocker handled)
  - Drivers/Firmware via HP Image Assistant (silent)
  - Reboot controlled by @RebootAfterUpdate@ token or env var REBOOT_AFTER_UPDATE=true
#>

#region safety / relaunch
$ErrorActionPreference = 'Stop'
$ProgressPreference    = 'SilentlyContinue'
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

function Invoke-Relaunch64Admin {
  $ps64 = "$env:WINDIR\Sysnative\WindowsPowerShell\v1.0\powershell.exe"
  $args = "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`""
  Start-Process $ps64 -ArgumentList $args -Verb RunAs | Out-Null
  exit 0
}

# Relaunch as 64-bit, elevated if needed
if (-not [Environment]::Is64BitProcess) { Invoke-Relaunch64Admin }
$principal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
if (-not $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) { Invoke-Relaunch64Admin }
#endregion

#region config
$token               = '@RebootAfterUpdate@'
$RebootAfterUpdate   = ($token -eq '$true') -or ($env:REBOOT_AFTER_UPDATE -match '^(1|true|yes)$')
$WorkRoot            = Join-Path $env:ProgramData 'HP\HPCMSL-Updates'
$HpiaReport          = Join-Path $WorkRoot 'HPIA\Reports'
$HpiaDownload        = Join-Path $WorkRoot 'HPIA\Downloads'
New-Item -ItemType Directory -Force -Path $WorkRoot,$HpiaReport,$HpiaDownload | Out-Null
#endregion

#region silent NuGet provider + PSGallery bootstrap (no prompts)
try {
  # Ensure PSGallery exists & is trusted (avoid "untrusted repo" prompts)
  if (-not (Get-PSRepository -Name 'PSGallery' -ErrorAction SilentlyContinue)) {
    try { Register-PSRepository -Default -ErrorAction Stop } catch {
      Register-PSRepository -Name 'PSGallery' `
        -SourceLocation 'https://www.powershellgallery.com/api/v2' `
        -ScriptSourceLocation 'https://www.powershellgallery.com/api/v2' `
        -InstallationPolicy Trusted
    }
  }
  Set-PSRepository -Name PSGallery -InstallationPolicy Trusted

  # Ensure NuGet provider (silent bootstrap)
  $nugetProv = Get-PackageProvider -Name NuGet -ListAvailable -ErrorAction SilentlyContinue
  if (-not $nugetProv -or $nugetProv.Version -lt [version]'2.8.5.201') {
    Find-PackageProvider -Name NuGet -ForceBootstrap -IncludeDependencies -ErrorAction Stop | Out-Null
    Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Scope AllUsers -Force -Confirm:$false | Out-Null
    Import-PackageProvider  -Name NuGet -MinimumVersion 2.8.5.201 -Force | Out-Null
  }
}
catch {
  Write-Output "Failed to bootstrap NuGet/PSGallery: $($_.Exception.Message)"
  exit 1
}
#endregion

#region install / update HPCMSL
try {
  if (-not (Get-Module -ListAvailable -Name HPCMSL)) {
    Install-Module -Name HPCMSL -AcceptLicense -Force -Scope AllUsers -Confirm:$false
  } else {
    try { Update-Module -Name HPCMSL -Force -ErrorAction Stop } catch { }
  }

  Import-Module HPCMSL -Force -ErrorAction Stop
  $cmsl = Get-Module HPCMSL
  Write-Host "HPCMSL $($cmsl.Version) imported."
}
catch {
  Write-Output "Failed to install/import HPCMSL: $($_.Exception.Message)"
  exit 1
}
#endregion

#region info + helpers
$summary    = [System.Text.StringBuilder]::new()
$null       = $summary.Append("HP Update Summary: ")
$biosInfo   = $null

# Try both name variants across CMSL versions
if (Get-Command Get-HPBIOSVersion -ErrorAction SilentlyContinue) { $biosInfo = Get-HPBIOSVersion }
elseif (Get-Command Get-HPBiosVersion -ErrorAction SilentlyContinue) { $biosInfo = Get-HPBiosVersion }

if ($biosInfo) {
  $null = $summary.Append("Current BIOS: $($biosInfo.BIOSVersion). ")
  Write-Host "Current BIOS: $($biosInfo.BIOSVersion)"
} else {
  Write-Host "Could not read BIOS version."
}

function Get-HpiaExe {
  $exe = Join-Path $env:ProgramData 'HP\HP Image Assistant\HPImageAssistant.exe'
  if (Test-Path $exe) { return $exe }
  $candidate = Get-ChildItem -Path "$env:ProgramData\HP" -Filter HPImageAssistant.exe -Recurse -ErrorAction SilentlyContinue |
               Select-Object -First 1 -ExpandProperty FullName
  return $candidate
}
#endregion

#region BIOS update via CMSL (handles BitLocker) — PS 5.1 style (no ??)
$biosUpdated = $false
try {
  $biosCmd = Get-Command Get-HPBIOSUpdates -ErrorAction SilentlyContinue
  if (-not $biosCmd) { $biosCmd = Get-Command Get-HPBiosUpdates -ErrorAction SilentlyContinue }

  if ($biosCmd) {
    $cmdName = $biosCmd.Name
    $isLatest = & $cmdName -Check
    if (-not $isLatest) {
      Write-Host "New BIOS available. Flashing (BitLocker suspended if enabled)..."
      & $cmdName -Flash -Yes -BitLocker suspend -Quiet -Overwrite -Force
      $biosUpdated = $true
      $null = $summary.Append("BIOS updated. ")
    } else {
      $null = $summary.Append("No BIOS update needed. ")
    }
  } else {
    $null = $summary.Append("BIOS cmdlet not available. ")
  }
}
catch {
  $null = $summary.Append("BIOS update failed: $($_.Exception.Message). ")
  Write-Host "BIOS update failed: $($_.Exception.Message)"
}
#endregion

#region Drivers/Firmware via HPIA (silent)
$driversUpdated = $false
try {
  Install-HPImageAssistant -Quiet | Out-Null
  $hpiaExe = Get-HpiaExe
  if (-not $hpiaExe) { throw "HPImageAssistant.exe not found after install." }

  $args = @(
    '/Operation:Analyze'
    '/Action:Install'
    '/Selection:All'
    '/Category:Drivers,Software,Firmware'
    "/ReportFolder:`"$HpiaReport`""
    "/SoftpaqDownloadFolder:`"$HpiaDownload`""
    '/Noninteractive'
    '/Silent'
    '/RunHidden'
  ) -join ' '

  Write-Host "Running HPIA..."
  $proc = Start-Process -FilePath $hpiaExe -ArgumentList $args -Wait -PassThru
  $exit = $proc.ExitCode

  if ($exit -eq 256) {
    $null = $summary.Append("No driver/firmware updates needed. ")
  } else {
    $driversUpdated = $true
    $null = $summary.Append("Drivers/firmware processed by HPIA (exit $exit). ")
  }
}
catch {
  $null = $summary.Append("HPIA failed: $($_.Exception.Message). ")
  Write-Host "HPIA failed: $($_.Exception.Message)"
}
#endregion

#region reboot logic & output
$rebootNeeded = $biosUpdated -or $driversUpdated
if ($rebootNeeded) {
  if ($RebootAfterUpdate) {
    $null = $summary.Append("System will reboot to complete installation.")
    Write-Host "Rebooting..."
    Start-Sleep -Seconds 8
    Restart-Computer -Force
  } else {
    $null = $summary.Append("REBOOT REQUIRED to complete installation.")
    Write-Host "REBOOT REQUIRED to complete installation."
  }
} else {
  $null = $summary.Append("No reboot needed.")
  Write-Host "No reboot needed."
}

Write-Output $summary.ToString()
#endregion
